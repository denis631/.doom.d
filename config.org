#+TITLE: My doom emacs config

* Table of Content                                                                                                 :TOC:
- [[#ui][UI]]
- [[#programming][Programming]]
  - [[#rust][Rust]]
  - [[#go][Go]]
- [[#org][Org]]
  - [[#core][core]]
  - [[#misc][misc]]
  - [[#fancy-priorities][fancy priorities]]
  - [[#org-mode][org-mode]]
- [[#navigation][Navigation]]
  - [[#evil][evil]]
  - [[#counsel][counsel]]
  - [[#ivy][ivy]]
  - [[#frog-jump][frog-jump]]
- [[#misc-1][Misc]]
  - [[#remove-red-highlighting-after-80-chars][remove red highlighting after 80 chars]]
  - [[#super-save][super-save]]
  - [[#vterm][vterm]]
  - [[#webkit][webkit]]
  - [[#pdf-tools-fix][pdf-tools fix]]
  - [[#gif-screencast][gif screencast]]
  - [[#dimmer][dimmer]]
  - [[#daemon][daemon]]

* UI
#+BEGIN_SRC elisp
(setq doom-theme 'chocolate
      doom-font (font-spec :family "Hasklig" :weight 'semi-bold :size 15)
      display-line-numbers-type 'relative)
(add-to-list 'default-frame-alist '(alpha . 95))
#+END_SRC
* Programming
** Rust
#+BEGIN_SRC elisp
(use-package! toml-mode)
(use-package! rust-mode
  :hook (rust-mode . lsp))

(after! rustic
  (setq rustic-format-on-save t))
#+END_SRC
** Go
#+BEGIN_SRC elisp
(setq gofmt-command "goimports")
(add-hook 'before-save-hook 'gofmt-before-save)
#+END_SRC
* Org
** core
#+BEGIN_SRC elisp
(setq org-directory "~/Library/Mobile Documents/com~apple~CloudDocs/Notes/")

(after! org
  (setq org-fontify-done-headline t)

  (setq org-tags-column -120)

  ;; workflow
  (setq org-todo-keywords '((sequence "PROJ(P)" "HOLD(H)" "|" "DONE(d)") ;; project
                            (sequence "TODO(t)" "|" "IN PROGRESS(p)" "|" "DONE(d)") ;; items in scrum sprint
                            (sequence "[ ](T)" "[?](Q)" "|" "[X](D)"))) ;; simple todos

  ;; org-bullets
  (setq org-bullets-bullet-list '("•"))

  ;; org-capture
  (setq private-todo-path (concat org-directory "todo.org")
        private-notes-path (concat org-directory "note.org")
        work-todo-path (concat org-directory "work-todo.org")
        work-journal-path (concat org-directory "work-journal.org"))

  (setq org-agenda-files (list private-todo-path))

  (setq org-capture-templates
        '(("t" "Templates for private todos")
          ("tt" "Todo" entry (file+headline private-todo-path "To be estimated/refined")
           "* TODO %?")
          ("tl" "Todo with Link" entry (file+headline private-todo-path "To be estimated/refined")
           "* TODO %?\n%a")
          ("n" "Note" entry (file+headline private-notes-path "Notes")
           "* %^{Type of link|ARTICLE|VIDEO|PAPER|BOOK} %a\n %?\n %i")

          ;; define work prefix/group
          ("w" "Templates for work")
          ("wt" "Work todo" entry (file+headline work-todo-path "Tasks")
           "* TODO %?")
          ("wl" "Work todo with link" entry (file+headline work-todo-path "Tasks")
           "* TODO %?\n%a")
          ("wq" "Work question" entry (file+headline work-todo-path "Tasks")
           "* [?] %?")
          ("wql" "Work question with link" entry (file+headline work-todo-path "Tasks")
           "* [?] %?\n%a")
          ("wj" "Work Journal" entry (file+datetree work-journal-path)
           "* %U %?\n%i\n")))

  (set-pretty-symbols!
    'org-mode :alist '(("[ ]" . ?☐)
                       ("[X]" . ?☑)
                       ("[-]" . ?❍))))
#+END_SRC
** misc
#+BEGIN_SRC elisp
(doom-themes-org-config)
(setq doom-scratch-buffer-major-mode 'org-mode)
#+END_SRC
** fancy priorities
#+BEGIN_SRC elisp
(after! org-fancy-priorities
  (setq org-highest-priority ?A
        org-lowest-priority ?D
        org-priority-faces '((?A . error)
                             (?B . warning)
                             (?C . success)
                             (?D . success))
        org-fancy-priorities-list '((?A . "ASAP ")
                                    (?B . "SOON ")
                                    (?C . "CHILL")
                                    (?D . "MAYBE"))))
#+END_SRC
** org-mode
#+BEGIN_SRC elisp
(add-hook! org-mode
  (org-fancy-priorities-mode))
#+END_SRC
* Navigation
** evil
#+BEGIN_SRC elisp
(after! evil
  (advice-add #'evil-next-line :after #'evil-scroll-line-to-center)
  (advice-add #'evil-previous-line :after #'evil-scroll-line-to-center))
#+END_SRC
** counsel
#+BEGIN_SRC elisp
(after! counsel
  (add-to-list 'ivy-update-fns-alist '(counsel-imenu . auto))
  (add-to-list 'ivy-update-fns-alist '(counsel-rg . auto))
  (advice-add #'counsel-imenu :around #'doom-set-jump-a)
  (advice-add #'counsel-rg :around #'doom-set-jump-a)

  ;; no sorting for imenu items
  (add-to-list 'ivy-sort-functions-alist '(counsel-imenu))
  (map! "C-x b" #'counsel-switch-buffer))
#+END_SRC
** ivy
#+BEGIN_SRC elisp
(after! ivy-posframe
  (setf (alist-get t ivy-posframe-display-functions-alist)
        #'ivy-posframe-display-at-frame-top-center)
  (set-face-attribute 'ivy-posframe nil :foreground "#C7AE9D" :background "#261D1F"))
#+END_SRC
** frog-jump
#+BEGIN_SRC elisp
(use-package! frog-jump-buffer
  :config
  (setq frog-jump-buffer-include-current-buffer nil)
  (map! :leader
        :desc "Frog-Jump to buffer"
        "b j"
        #'frog-jump-buffer))
#+END_SRC
* Misc
** remove red highlighting after 80 chars
#+BEGIN_SRC elisp
(delq! 'lines-tail whitespace-style)
#+END_SRC
** super-save
#+BEGIN_SRC elisp
(use-package! super-save
  :config
  (super-save-mode +1)
  (setq super-save-auto-save-when-idle t))
#+END_SRC
** vterm
#+BEGIN_SRC elisp
(after! vterm
  (map! :map vterm-mode-map "C-c C-x" #'vterm--self-insert)
  (map! :map vterm-mode-map "C-c y" #'vterm--self-insert)
  (map! :map vterm-mode-map "C-c n" #'vterm--self-insert))
#+END_SRC
** webkit
#+BEGIN_SRC elisp
(setq xwidget-webkit-enable-plugins t)
#+END_SRC
** pdf-tools fix
#+BEGIN_SRC elisp
(defun compilation--default-buffer-name (_) "default-buffer-name")
#+END_SRC
** gif screencast
#+BEGIN_SRC elisp
(with-eval-after-load 'gif-screencast
  (setq gif-screencast-args '("-x")) ;; To shut up the shutter sound of `screencapture' (see `gif-screencast-command').
  (setq gif-screencast-cropping-program "mogrify") ;; Optional: Used to crop the capture to the Emacs frame.
  (setq gif-screencast-capture-format "ppm")) ;; Optional: Required to crop captured images.
#+END_SRC
** dimmer
#+BEGIN_SRC elisp
(defun company-box-p ()
  (string-prefix-p " *company-box-" (buffer-name)))

(use-package! dimmer
  :defer 1
  :config
  (setq dimmer-fraction 0.7
        dimmer-prevent-dimming-predicates '(window-minibuffer-p company-box-p))
  (dimmer-configure-posframe)
  (dimmer-mode t))
#+END_SRC
** daemon
#+BEGIN_SRC elisp
(server-start)
#+END_SRC
