#+TITLE: My doom emacs config

* Table of Content                                                                                                :TOC:
- [[#ui][UI]]
  - [[#doom-properties][doom properties]]
  - [[#lightdark-theme][light/dark theme]]
- [[#programming][Programming]]
  - [[#lsp][LSP]]
- [[#org][Org]]
  - [[#font][font]]
  - [[#capture-templates][capture templates]]
  - [[#core][core]]
  - [[#fancy-priorities][fancy priorities]]
  - [[#hook][hook]]
  - [[#misc][misc]]
- [[#navigation][Navigation]]
  - [[#dired][dired]]
  - [[#evil][evil]]
  - [[#counsel][counsel]]
  - [[#ivy][ivy]]
  - [[#scroll-on-jump][scroll-on-jump]]
- [[#misc-1][Misc]]
  - [[#server][server]]
  - [[#remove-red-highlighting-after-80-chars][remove red highlighting after 80 chars]]
  - [[#super-save][super-save]]
  - [[#vterm][vterm]]
  - [[#webkit][webkit]]
  - [[#pdf-tools-fix][pdf-tools fix]]
  - [[#gif-screencast][gif screencast]]
  - [[#dimmer][dimmer]]
  - [[#restclient][restclient]]

* UI
** doom properties
#+BEGIN_SRC elisp
(setq doom-theme 'chocolate
      doom-font (font-spec :family "Hasklig" :weight 'semi-bold :size 14)
      display-line-numbers-type nil
      evil-respect-visual-line-mode t)

(add-to-list 'default-frame-alist '(alpha . 95))

(global-whitespace-mode)

(setq smie--parent nil)
#+END_SRC
** light/dark theme
#+BEGIN_SRC elisp
(setq is-dark-mode-applescript "osascript -e \'tell application \"System Events\" to tell appearance preferences to return dark mode\'")

(defun adjust-color-theme-to-os-theme ()
  (interactive)
  (let ((expected-theme (if (string= (string-trim (shell-command-to-string is-dark-mode-applescript)) "true")
                            'chocolate
                          'doom-ayu-light)))
    (unless (string= doom-theme expected-theme)
      (load-theme expected-theme t)
      (doom/reload-theme))))

;; run a timer every minute in order to adjust the color theme
(run-with-timer 0 600 #'adjust-color-theme-to-os-theme)
#+END_SRC
* Programming
** LSP
#+BEGIN_SRC elisp
(after! lsp
  (setq lsp-eldoc-enable-hover nil))
#+END_SRC
* Org
** font
#+begin_src elisp
(defun denis631/org-font-setup ()
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Consolas" :weight 'regular :height (cdr face)))

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
#+end_src
** capture templates
#+begin_src elisp
(defun denis631/org-capture-setup ()
  (setq org-directory "~/Library/Mobile Documents/com~apple~CloudDocs/Notes/"
        private-todo-path (concat org-directory "todo.org")
        private-notes-path (concat org-directory "note.org")
        work-todo-path (concat org-directory "work-todo.org")
        work-journal-path (concat org-directory "work-journal.org"))

  (setq org-agenda-files (list private-todo-path))

  (setq org-capture-templates
        '(("t" "Templates for private todos")
          ("tt" "Todo" entry (file+headline private-todo-path "To be estimated/refined")
           "* TODO %? %^G")
          ("tl" "Todo with Link" entry (file+headline private-todo-path "To be estimated/refined")
           "* TODO %? %^G\n%a")

          ("n" "Note" entry (file+headline private-notes-path "Notes")
           "* %^{Type of link|ARTICLE|VIDEO|PAPER|BOOK|PODCAST|UNI-COURSE} %a %^G\n %?\n %i")

          ;; define work prefix/group
          ("w" "Templates for work")
          ("wt" "Work todo" entry (file+headline work-todo-path "Tasks")
           "* TODO %?")
          ("w?" "Work question" entry (file+headline work-todo-path "Tasks")
           "* [?] %?")
          ("wj" "Work Journal" entry (file+datetree work-journal-path)
           "* %U %?\n%i\n"))))
#+end_src
** core
#+BEGIN_SRC elisp
(after! org
  (setq org-fontify-done-headline t)

  ;; latex-size increase
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))

  (setq org-tags-column -120)

  ;; workflow
  (setq org-todo-keywords '((sequence "PROJ(P)" "HOLD(H)" "|" "DONE(d)") ;; project
                            (sequence "TODO(t)" "|" "IN PROGRESS(p)" "|" "IN REVIEW(r)" "|" "DONE(d)") ;; items in scrum sprint
                            (sequence "[ ](T)" "[?](Q)" "|" "[X](D)"))) ;; simple todos

  (set-pretty-symbols!
    'org-mode :alist '(("[ ]" . ?☐)
                       ("[X]" . ?☑)
                       ("[-]" . ?❍)))

  (denis631/org-font-setup)
  (denis631/org-capture-setup))
#+END_SRC
** fancy priorities
#+BEGIN_SRC elisp
(after! org-fancy-priorities
  (setq org-highest-priority ?A
        org-lowest-priority ?D
        org-priority-faces '((?A . error)
                             (?B . warning)
                             (?C . success)
                             (?D . success))
        org-fancy-priorities-list '((?A . "ASAP ")
                                    (?B . "SOON ")
                                    (?C . "CHILL")
                                    (?D . "MAYBE"))))
#+END_SRC
** hook
#+BEGIN_SRC elisp
(add-hook! org-mode
  (org-fancy-priorities-mode))
#+END_SRC
** misc
#+BEGIN_SRC elisp
(after! org-superstar
  (setq org-superstar-headline-bullets-list '("•")))

(doom-themes-org-config)
(setq doom-scratch-buffer-major-mode 'org-mode)
#+END_SRC
* Navigation
** dired
#+begin_src elisp
(after! dired
  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-up-directory
    "l" 'dired-find-file))
#+end_src
** evil
#+BEGIN_SRC elisp
(after! evil
  ;; use dvorak keys instead
  (setq evil-escape-key-sequence "hk")

  ;; change to programmer-dvorak when in insert mode
  (add-hook! 'evil-insert-state-entry-hook
    (activate-input-method "english-dvorak")))
#+END_SRC
** counsel
#+BEGIN_SRC elisp
(after! counsel
  (add-to-list 'ivy-update-fns-alist '(counsel-imenu . auto))
  (add-to-list 'ivy-update-fns-alist '(counsel-rg . auto))
  (advice-add #'counsel-imenu :around #'doom-set-jump-a)
  (advice-add #'counsel-rg :around #'doom-set-jump-a)

  (map! "C-x b" #'counsel-switch-buffer))
#+END_SRC
** ivy
#+BEGIN_SRC elisp
(after! ivy-posframe
  (setf (alist-get t ivy-posframe-display-functions-alist)
        #'ivy-posframe-display-at-frame-top-center)
  (setq ivy-posframe-width 151
        ivy-posframe-parameters `((min-width . ,ivy-posframe-width)
                                  (min-height . ,ivy-height))))
#+END_SRC
** scroll-on-jump
#+begin_src elisp
(use-package! scroll-on-jump
  :config
  (setq scroll-on-jump-duration 0.6)

  (with-eval-after-load 'evil
    (scroll-on-jump-advice-add evil-undo)
    (scroll-on-jump-advice-add evil-redo)
    (scroll-on-jump-advice-add evil-jump-item)
    (scroll-on-jump-advice-add evil-jump-forward)
    (scroll-on-jump-advice-add evil-jump-backward)
    (scroll-on-jump-advice-add evil-ex-search-next)
    (scroll-on-jump-advice-add evil-ex-search-previous)
    (scroll-on-jump-advice-add evil-forward-paragraph)
    (scroll-on-jump-advice-add evil-backward-paragraph))

  (with-eval-after-load 'goto-chg
    (scroll-on-jump-advice-add goto-last-change)
    (scroll-on-jump-advice-add goto-last-change-reverse)))
#+end_src
* Misc
** server
#+begin_src elisp
(after! server
  (when (not (server-running-p))
    (server-start)))
#+end_src
** remove red highlighting after 80 chars
#+BEGIN_SRC elisp
(delq! 'lines-tail whitespace-style)
#+END_SRC
** super-save
#+BEGIN_SRC elisp
(use-package! super-save
  :config
  (super-save-mode +1)
  (setq super-save-auto-save-when-idle t))
#+END_SRC
** vterm
#+BEGIN_SRC elisp
(after! vterm
  (map! :map vterm-mode-map "C-c C-x" #'vterm--self-insert)
  (map! :map vterm-mode-map "C-c y" #'vterm--self-insert)
  (map! :map vterm-mode-map "C-c n" #'vterm--self-insert))
#+END_SRC
** webkit
#+BEGIN_SRC elisp
(setq xwidget-webkit-enable-plugins t)

(defun xwidget-webkit-callback--load-changed (title)
  (xwidget-log "webkit finished loading: '%s'" title)
  ;;TODO - check the native/internal scroll
  ;;(xwidget-adjust-size-to-content xwidget)
  (xwidget-webkit-adjust-size-to-window xwidget)
  (rename-buffer (format "*xwidget webkit: %s *" title)))

(defun xwidget-webkit-callback (xwidget xwidget-event-type)
  "Callback for xwidgets.
XWIDGET instance, XWIDGET-EVENT-TYPE depends on the originating xwidget."
  (if (not (buffer-live-p (xwidget-buffer xwidget)))
      (xwidget-log
       "error: callback called for xwidget with dead buffer")
    (with-current-buffer (xwidget-buffer xwidget)
      (cond ((eq xwidget-event-type 'load-changed)
             (xwidget-webkit-execute-script
              xwidget "document.title"
              'xwidget-webkit-callback--load-changed)
             (pop-to-buffer (current-buffer)))
            ((eq xwidget-event-type 'decide-policy)
             (let ((strarg  (nth 3 last-input-event)))
               (if (string-match ".*#\\(.*\\)" strarg)
                   (xwidget-webkit-show-id-or-named-element
                    xwidget
                    (match-string 1 strarg)))))
            ((eq xwidget-event-type 'javascript-callback)
             (let ((proc (nth 3 last-input-event))
                   (arg  (nth 4 last-input-event)))
               (funcall proc arg)))
            (t (xwidget-log "unhandled event:%s" xwidget-event-type))))))
#+END_SRC
** pdf-tools fix
#+BEGIN_SRC elisp
(defun compilation--default-buffer-name (_) "default-buffer-name")
#+END_SRC
** gif screencast
#+BEGIN_SRC elisp
(with-eval-after-load 'gif-screencast
  (setq gif-screencast-args '("-x")) ;; To shut up the shutter sound of `screencapture' (see `gif-screencast-command').
  (setq gif-screencast-cropping-program "mogrify") ;; Optional: Used to crop the capture to the Emacs frame.
  (setq gif-screencast-capture-format "ppm")) ;; Optional: Required to crop captured images.
#+END_SRC
** dimmer
#+BEGIN_SRC elisp
(use-package! dimmer
  :defer 3
  :config
  (setq dimmer-fraction 0.7
        dimmer-prevent-dimming-predicates '(window-minibuffer-p))
  (dimmer-configure-posframe)
  (dimmer-configure-magit)
  (dimmer-configure-org)
  (dimmer-configure-which-key)
  (dimmer-configure-hydra)

  ;; in order to ignore all company box windows
  (add-to-list
   'dimmer-exclusion-regexp-list "^ \\*company-box-1*\\*$")

  (dimmer-mode t))
#+END_SRC
** restclient
#+BEGIN_SRC elisp
(add-to-list 'auto-mode-alist (cons "\\.restclient\\'" 'restclient-mode))
#+END_SRC
